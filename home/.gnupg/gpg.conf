# NOTE: This file has been modified by Erik BjÃ¤reholt to suit his own needs
#
# Influences:
#  - https://help.riseup.net/en/security/message-security/openpgp/best-practices


# Unless you specify which option file to use (with the command line
# option "--options filename"), GnuPG uses the file ~/.gnupg/gpg.conf
# by default.

no-greeting

# If you have more than 1 secret key in your keyring, you may want to
# uncomment the following option and set your preferred keyid.
default-key  7A8F433A86E4C130

# Short keyids (32 bits) can easily be spoofed, long keys (64 bits) are a lot harder
keyid-format 0xlong

# Use --encrypt-to to add the specified key as a recipient to all
# messages.  This is useful, for example, when sending mail through a
# mail client that does not automatically encrypt mail to your key.
# In the example, this option allows you to read your local copy of
# encrypted mail that you've sent to others.

# NOTE: This may be a bad idea if a psedonymous key is used as sender
#       since it might connect the psedonymous key to the default key.

#encrypt-to some-key-id

# Using a keyserver pool is a better option since it removes dependence
# on a single server
#
# Also uses hkps instead of the unencrypted hkp protocol
# (requires a `sudo apt-get install gnupg-curl`)
# TODO: Store the certificate in a system-independent place (does the path
#       need to be a full path or can it be relative?)

keyserver hkps://hkps.pool.sks-keyservers.net
keyserver-options ca-cert-file=/home/erb/.gnupg/sks-keyservers.netCA.pem

# Don't allow for other, key-specific, keyservers than the one above
keyserver-options no-honor-keyserver-url

# NOTE: Do NOT use auto-key-retrieve as this will potentially expose which
# public keys you are interested in to the world, use something like parcimonie instead.
#keyserver-options auto-key-retrieve

# Display photo user IDs in key listings

# list-options show-photos

# Display photo user IDs when a signature from a key with a photo is
# verified

# verify-options show-photos

# Use this program to display photo user IDs
#
# %i is expanded to a temporary file that contains the photo.
# %I is the same as %i, but the file isn't deleted afterwards by GnuPG.
# %k is expanded to the key ID of the key.
# %K is expanded to the long OpenPGP key ID of the key.
# %t is expanded to the extension of the image (e.g. "jpg").
# %T is expanded to the MIME type of the image (e.g. "image/jpeg").
# %f is expanded to the fingerprint of the key.
# %% is %, of course.
#
# If %i or %I are not present, then the photo is supplied to the
# viewer on standard input.  If your platform supports it, standard
# input is the best way to do this as it avoids the time and effort in
# generating and then cleaning up a secure temp file.
#
# If no photo-viewer is provided, GnuPG will look for xloadimage, eog,
# or display (ImageMagick).  On Mac OS X and Windows, the default is
# to use your regular JPEG image viewer.
#
# Some other viewers:
# photo-viewer "qiv %i"
# photo-viewer "ee %i"
#
# This one saves a copy of the photo ID in your home directory:
# photo-viewer "cat > ~/photoid-for-key-%k.%t"
#
# Use your MIME handler to view photos:
# photo-viewer "metamail -q -d -b -c %T -s 'KeyID 0x%k' -f GnuPG"

# Passphrase agent

use-agent

utf8-strings
auto-key-locate local
